import streamlit as st
from pages.utils import afficher_infos_commune
import pandas as pd
import matplotlib.pyplot as plt
import plotly_express as px
import numpy as np
import altair as alt
import geopandas as gpd
import requests
import json # library to handle JSON files
# from streamlit_folium import folium_static
from streamlit_folium import folium_static
import folium # map rendering library
import streamlit.components.v1 as components
import fiona
from streamlit_option_menu import option_menu


def app(code_commune, nom_commune, code_epci, nom_epci, code_departement, nom_departement, code_region, nom_region):
  # Appeler la fonction et r√©cup√©rer les informations

  #############################################################################

  st.title("ü©∫ SANT√â")
  st.header('1.Taux de mortalit√©')
  st.caption("source : Insee RP. Parue le XXXX - Mill√©sime 1968 √† 2020")
  st.caption("Le taux de mortalit√© est ici un taux annuel moyen sur la derni√®re p√©riode intercensitaire. \
              C‚Äôest le rapport entre les d√©c√®s de la p√©riode et la moyenne des populations entre les deux recensements. \
              Ce taux de mortalit√© est le taux 'brut' de mortalit√©. \
              Il ne doit pas √™tre confondu avec le taux de mortalit√© standardis√© qui permet de comparer des taux de mortalit√© \
              √† structure d'√¢ge √©quivalente ou avec le taux de mortalit√© pr√©matur√© qui ne s'int√©resse qu'aux d√©c√®s intervenus avant 65 ans.")
  st.caption("L‚Äôindicateur d‚Äôaccessibilit√© potentielle localis√©e (APL) a √©t√© d√©velopp√© par la DREES et l‚ÄôIRDES* pour mesurer \
              l‚Äôad√©quation spatiale entre l‚Äôoffre et la demande de soins de premier recours √† un √©chelon g√©ographique fin. \
              Il vise √† am√©liorer les indicateurs usuels d‚Äôaccessibilit√© aux soins (distance d‚Äôacc√®s, densit√© par bassin de vie ou d√©partement‚Ä¶). \
              Il mobilise pour cela les donn√©es de l‚ÄôAssurance maladie (SNIIR-AM) ainsi que les donn√©es de population de l‚ÄôInsee.")
  #Commune
  period = "2014-2020"
  last_year_mortal = "2020"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(fichier, code, period):
      df = pd.read_csv(fichier, dtype={"codgeo": str}, sep=';')
      df = df.loc[df["codgeo"] == code]
      df = df.loc[df["an"] == period]
      return df

  tx_mortalite_ville = load_data("./sante/taux_de_mortalite/insee_rp_evol_1968_communes_" + last_year_mortal + ".csv", code_commune, period)
  tx_mortalite_epci = load_data("./sante/taux_de_mortalite/insee_rp_evol_1968_epci_" + last_year_mortal + ".csv", code_epci, period)
  tx_mortalite_dpt = load_data("./sante/taux_de_mortalite/insee_rp_evol_1968_departement_" + last_year_mortal + ".csv", code_departement, period)
  tx_mortalite_reg = load_data("./sante/taux_de_mortalite/insee_rp_evol_1968_region_" + last_year_mortal + ".csv", code_region, period)

  # France
  def load_data_france(fichier, period):
      df = pd.read_csv(fichier, dtype={"codgeo": str}, sep=';')
      df = df.loc[df["an"] == period]
      return df

  tx_mortalite_france = load_data_france("./sante/taux_de_mortalite/insee_rp_evol_1968_france_" + last_year_mortal + ".csv", period)

  # Fusionner les donn√©es
  result = pd.concat([tx_mortalite_ville, tx_mortalite_epci, tx_mortalite_dpt, tx_mortalite_reg, tx_mortalite_france])

  # √âpurer le tableau
  result = result[['libgeo', 'tx_morta']]
  result.columns = ['Territoires', 'Taux de mortalit√©']
  result['Taux de mortalit√©'] = result['Taux de mortalit√©'].str.replace(',', '.').astype(float)
  result.reset_index(drop=True, inplace=True)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(result, x='Taux de mortalit√©', y='Territoires', orientation='h',
               title='Comparaison du taux de mortalit√©')

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key1"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write("Donn√©es des taux de mortalit√©")
      st.dataframe(result)
  elif selected == "Graphique":
      st.plotly_chart(fig)
  ############################################################################
  st.header("2.L'accessibilit√© aux soins")
  st.subheader("Accessibilit√© potentielle localis√©e (APL) √† la m√©decine lib√©rale")
  st.caption("Source : SNDS, Syst√®me National des Donn√©es de Sant√©. Parue le XXXX - Mill√©sime 2021")
  st.caption("L‚ÄôAccessibilit√© Potentielle Localis√©e est un indicateur local, disponible au niveau de chaque commune, qui tient compte de l‚Äôoffre et de la demande issue des communes environnantes. Calcul√© √† l‚Äô√©chelle communale, l‚ÄôAPL met en √©vidence des disparit√©s d‚Äôoffre de soins. L‚ÄôAPL tient compte du niveau d‚Äôactivit√© des professionnels en exercice ainsi que de la structure par √¢ge de la population de chaque commune qui influence les besoins de soins. L‚Äôindicateur permet de quantifier la possibilit√© des habitants d‚Äôacc√©der aux soins des m√©decins g√©n√©ralistes lib√©raux.")

  last_year_apl = "2021"

  # Charger les donn√©es pour les m√©decins g√©n√©ralistes
  def load_data_generaliste(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['apl_mg_hmep'].values[0]

  # M√©decins g√©n√©ralistes
  apl_com = load_data_generaliste("./sante/apl/medecin_generaliste/apl_medecin_generaliste_com_" + last_year_apl + ".csv", code_commune)
  apl_epci = load_data_generaliste("./sante/apl/medecin_generaliste/apl_medecin_generaliste_epci_" + last_year_apl + ".csv", code_epci)
  apl_dpt = load_data_generaliste("./sante/apl/medecin_generaliste/apl_medecin_generaliste_dpt_" + last_year_apl + ".csv", code_departement)
  apl_reg = load_data_generaliste("./sante/apl/medecin_generaliste/apl_medecin_generaliste_region_" + last_year_apl + ".csv", code_region)
  apl_fr = pd.read_csv("./sante/apl/medecin_generaliste/apl_medecin_generaliste_france_" + last_year_apl + ".csv", sep=';')['apl_mg_hmep'].values[0]

  data_medecin_generaliste = pd.DataFrame({
      'Territoires': [nom_commune, nom_epci, nom_departement, nom_region, 'France'],
      "APL - " + last_year_apl: [apl_com, apl_epci, apl_dpt, apl_reg, apl_fr]
  })

  # Charger les donn√©es pour les chirurgiens dentistes
  def load_data_dentiste(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['apl_chirurgiens_dentistes'].values[0]

  # Chirurgiens dentistes
  apl_dentistes_commune = load_data_dentiste("./sante/apl/chirurgiens_dentistes/apl_chirurgiens_dentistes_commune_" + last_year_apl + ".csv", code_commune)
  apl_dentistes_epci = load_data_dentiste("./sante/apl/chirurgiens_dentistes/apl_chirurgiens_dentistes_epci_" + last_year_apl + ".csv", code_epci)
  apl_dentistes_departement = load_data_dentiste("./sante/apl/chirurgiens_dentistes/apl_chirurgiens_dentistes_departement_" + last_year_apl + ".csv", code_departement)
  apl_dentistes_region = load_data_dentiste("./sante/apl/chirurgiens_dentistes/apl_chirurgiens_dentistes_region_" + last_year_apl + ".csv", code_region)
  apl_dentistes_france = pd.read_csv("./sante/apl/chirurgiens_dentistes/apl_chirurgiens_dentistes_france_" + last_year_apl + ".csv", sep=';')['apl_chirurgiens_dentistes'].values[0]

  data_chirurgiens_dentistes = pd.DataFrame({
      'Territoires': [nom_commune, nom_epci, nom_departement, nom_region, 'France'],
      "APL - " + last_year_apl: [apl_dentistes_commune, apl_dentistes_epci, apl_dentistes_departement, apl_dentistes_region, apl_dentistes_france]
  })

  # Charger les donn√©es pour les sages-femmes
  def load_data_sages_femmes(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['apl_sages_femmes'].values[0]

  # Sages-femmes
  apl_sages_femmes_commune = load_data_sages_femmes("./sante/apl/sages_femmes/apl_sages_femmes_commune_" + last_year_apl + ".csv", code_commune)
  apl_sages_femmes_epci = load_data_sages_femmes("./sante/apl/sages_femmes/apl_sages_femmes_epci_" + last_year_apl + ".csv", code_epci)
  apl_sages_femmes_departement = load_data_sages_femmes("./sante/apl/sages_femmes/apl_sages_femmes_departement_" + last_year_apl + ".csv", code_departement)
  apl_sages_femmes_region = load_data_sages_femmes("./sante/apl/sages_femmes/apl_sages_femmes_region_" + last_year_apl + ".csv", code_region)
  apl_sages_femmes_france = pd.read_csv("./sante/apl/sages_femmes/apl_sages_femmes_france_" + last_year_apl + ".csv", sep=';')['apl_sages_femmes'].values[0]

  data_sages_femmes = pd.DataFrame({
      'Territoires': [nom_commune, nom_epci, nom_departement, nom_region, 'France'],
      "APL - " + last_year_apl: [apl_sages_femmes_commune, apl_sages_femmes_epci, apl_sages_femmes_departement, apl_sages_femmes_region, apl_sages_femmes_france]
  })

  # Charger les donn√©es pour les infirmiers
  def load_data_infirmiers(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['apl_infirmiers'].values[0]

  # Infirmiers
  apl_infirmiers_commune = load_data_infirmiers("./sante/apl/infirmiers/apl_infirmiers_commune_" + last_year_apl + ".csv", code_commune)
  apl_infirmiers_epci = load_data_infirmiers("./sante/apl/infirmiers/apl_infirmiers_epci_" + last_year_apl + ".csv", code_epci)
  apl_infirmiers_departement = load_data_infirmiers("./sante/apl/infirmiers/apl_infirmiers_departement_" + last_year_apl + ".csv", code_departement)
  apl_infirmiers_region = load_data_infirmiers("./sante/apl/infirmiers/apl_infirmiers_region_" + last_year_apl + ".csv", code_region)
  apl_infirmiers_france = pd.read_csv("./sante/apl/infirmiers/apl_infirmiers_france_" + last_year_apl + ".csv", sep=';')['apl_infirmiers'].values[0]

  data_infirmiers = pd.DataFrame({
      'Territoires': [nom_commune, nom_epci, nom_departement, nom_region, 'France'],
      "APL - " + last_year_apl: [apl_infirmiers_commune, apl_infirmiers_epci, apl_infirmiers_departement, apl_infirmiers_region, apl_infirmiers_france]
  })


  # Charger les donn√©es pour les kin√©s
  def load_data_kines(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['apl_kines'].values[0]

  # Infirmiers
  apl_kines_commune = load_data_kines("./sante/apl/kines/apl_kines_commune_" + last_year_apl + ".csv", code_commune)
  apl_kines_epci = load_data_kines("./sante/apl/kines/apl_kines_epci_" + last_year_apl + ".csv", code_epci)
  apl_kines_departement = load_data_kines("./sante/apl/kines/apl_kines_departement_" + last_year_apl + ".csv", code_departement)
  apl_kines_region = load_data_kines("./sante/apl/kines/apl_kines_region_" + last_year_apl + ".csv", code_region)
  apl_kines_france = pd.read_csv("./sante/apl/kines/apl_kines_france_" + last_year_apl + ".csv", sep=';')['apl_kines'].values[0]

  data_kines = pd.DataFrame({
      'Territoires': [nom_commune, nom_epci, nom_departement, nom_region, 'France'],
      "APL - " + last_year_apl: [apl_kines_commune, apl_kines_epci, apl_kines_departement, apl_kines_region, apl_kines_france]
  })

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["M√©decins G√©n√©ralistes", "Chirurgiens Dentistes", "Sages Femmes", "Infirmiers", "Kin√©s"],  # required
      icons=["1-circle", "2-circle", "3-circle", "4-circle", "5-circle"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key2"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "M√©decins G√©n√©ralistes":
      st.write("Donn√©es des M√©decins G√©n√©ralistes - Accessibilit√© Potentielle Localis√©e (APL)")
      st.caption("Unit√© : nombre de consultations accessibles par an et par habitant")
      st.dataframe(data_medecin_generaliste)
  elif selected == "Chirurgiens Dentistes":
      st.write("Donn√©es des Chirurgiens Dentistes de 65 ans et moins - Accessibilit√© Potentielle Localis√©e (APL)")
      st.caption("Unit√© : nombre d'√©quivalents temps-plein (ETP) accessibles pour 100 000 habitants standardis√©s")
      st.dataframe(data_chirurgiens_dentistes)
      st.caption("L‚Äôaccessibilit√© aux chirurgiens-dentistes pour la ville de " + nom_commune + " et de " + apl_dentistes_commune + " ETP pour 100 000 habitants en " + last_year_apl + ". Pour comparaison, l‚Äôaccessibilit√© nationale moyenne est de 59,0 ETP pour 100 000 habitants en 2021." )
      if float(apl_dentistes_commune) > float(apl_dentistes_france):
        st.caption(f"Votre commune est donc mieux dot√©e en chirurgiens-dentistes, soit une accessibilit√© {round(float(apl_dentistes_commune) / float(apl_dentistes_france), 1)} fois plus √©lev√©e. A titre de comparaison, l‚Äôaccessibilit√© moyenne des 10 % de la population les moins bien dot√©s en chirurgiens-dentistes est de 15,3 ETP pour 100 000 habitants. Celle des 10 % les mieux dot√©s en chirurgiens-dentistes est de 111,0 ETP pour 100 000 habitants.")
      st.caption("Pour plus d'information : l'article de la dress du 01/02/2023 sur [l'accessibilit√© aux chirurgiens-dentistes](https://drees.solidarites-sante.gouv.fr/jeux-de-donnees-communique-de-presse/accessibilite-aux-soins-de-premier-recours-de-fortes)")
  elif selected == "Sages Femmes":
      st.write("Donn√©es des Sages Femmes - Accessibilit√© Potentielle Localis√©e (APL)")
      st.caption("Unit√© : nombre d'√©quivalents temps-plein (ETP) accessibles pour 100 000 habitants standardis√©s")
      st.dataframe(data_sages_femmes)
  elif selected == "Infirmiers":
      st.write("Donn√©es des Infirmiers de 65 ans et moins - Accessibilit√© Potentielle Localis√©e (APL)")
      st.caption("Unit√© : nombre d'√©quivalents temps-plein (ETP) accessibles pour 100 000 habitants standardis√©s")
      st.dataframe(data_infirmiers)
  elif selected == "Kin√©s":
      st.write("Donn√©es des Kin√©s de 65 ans et moins - Accessibilit√© Potentielle Localis√©e (APL)")
      st.caption("Unit√© : nombre d'√©quivalents temps-plein (ETP) accessibles pour 100 000 habitants standardis√©s")
      st.dataframe(data_kines)


  #############################################
  st.header("3. Acc√®s aux droits et aux soins")
  st.subheader("Les Affections de Longue Dur√©e (ALD)")
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2022")
  st.caption("L‚Äôallocation affection de longue dur√©e (ALD) permet la prise en charge √† 100% \
              des soins apport√©s √† une personne souffrant de maladies chroniques.  \
              Ces maladies reconnues figurent dans une liste officielle d‚Äôune trentaine \
              d‚Äôaffections. On peut y voir le diab√®te, les maladies de Parkinson et \
              d‚ÄôAlzheimer, la scoliose ou encore la tuberculose.")

  last_year_ald = "2022"
  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['ald'].values[0]

  # Commune
  tx_ald_commune = load_data("./sante/ald/ald_commune_" + last_year_ald + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], f"Taux de ALD {last_year_ald}": [tx_ald_commune]})

  # EPCI
  tx_ald_epci = load_data("./sante/ald/ald_epci_" + last_year_ald + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], f"Taux de ALD {last_year_ald}": [tx_ald_epci]})

  # D√©partement
  tx_ald_departement = load_data("./sante/ald/ald_departement_" + last_year_ald + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], f"Taux de ALD {last_year_ald}": [tx_ald_departement]})

  # R√©gion
  tx_ald_region = load_data("./sante/ald/ald_region_" + last_year_ald + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], f"Taux de ALD {last_year_ald}": [tx_ald_region]})

  # France
  tx_ald_france = load_data("./sante/ald/ald_france_" + last_year_ald + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], f"Taux de ALD {last_year_ald}": [tx_ald_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Convertir la colonne 'Taux de ALD 2022' en num√©rique
  all_data[f"Taux de ALD {last_year_ald}"] = all_data[f"Taux de ALD {last_year_ald}"].apply(lambda x: str(x).replace(',', '.')).astype(float)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x=f"Taux de ALD {last_year_ald}", y='Territoires', orientation='h',
               title=f"Comparaison du taux de ALD en {last_year_ald}")

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key3"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write(f"Donn√©es des Affections de Longue Dur√©e (ALD) en {last_year_ald}")
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)

  #####################
  st.subheader("Les b√©n√©ficaires de la CSS")
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2023")
  last_year_css = "2023"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(fichier, code, column_code='codgeo'):
      df = pd.read_csv(fichier, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df

  # Commune
  df_css_non_participative_commune = load_data(f"./sante/acces_droits/css_non_participative/css_non_participative_commune_{last_year_css}.csv", code_commune)
  df_css_participative_commune = load_data(f"./sante/acces_droits/css_participative/css_participative_commune_{last_year_css}.csv", code_commune)
  data_commune = pd.DataFrame({
      'Territoires': [nom_commune],
      'CSS non participative': df_css_non_participative_commune['css_non_participative'].values[0],
      'CSS participative': df_css_participative_commune['css_participative'].values[0]
  })

  # EPCI
  df_css_non_participative_epci = load_data(f"./sante/acces_droits/css_non_participative/css_non_participative_epci_{last_year_css}.csv", code_epci)
  df_css_participative_epci = load_data(f"./sante/acces_droits/css_participative/css_participative_epci_{last_year_css}.csv", code_epci)
  data_epci = pd.DataFrame({
      'Territoires': [nom_epci],
      'CSS non participative': df_css_non_participative_epci['css_non_participative'].values[0],
      'CSS participative': df_css_participative_epci['css_participative'].values[0]
  })

  # D√©partement
  df_css_non_participative_departement = load_data(f"./sante/acces_droits/css_non_participative/css_non_participative_departement_{last_year_css}.csv", code_departement)
  df_css_participative_departement = load_data(f"./sante/acces_droits/css_participative/css_participative_departement_{last_year_css}.csv", code_departement)
  data_departement = pd.DataFrame({
      'Territoires': [nom_departement],
      'CSS non participative': df_css_non_participative_departement['css_non_participative'].values[0],
      'CSS participative': df_css_participative_departement['css_participative'].values[0]
  })

  # R√©gion
  df_css_non_participative_region = load_data(f"./sante/acces_droits/css_non_participative/css_non_participative_region_{last_year_css}.csv", code_region)
  df_css_participative_region = load_data(f"./sante/acces_droits/css_participative/css_participative_region_{last_year_css}.csv", code_region)
  data_region = pd.DataFrame({
      'Territoires': [nom_region],
      'CSS non participative': df_css_non_participative_region['css_non_participative'].values[0],
      'CSS participative': df_css_participative_region['css_participative'].values[0]
  })

  # France
  df_css_non_participative_france = load_data(f"./sante/acces_droits/css_non_participative/css_non_participative_france_{last_year_css}.csv", '1111')
  df_css_participative_france = load_data(f"./sante/acces_droits/css_participative/css_participative_france_{last_year_css}.csv", '1111')
  data_france = pd.DataFrame({
      'Territoires': ['France'],
      'CSS non participative': df_css_non_participative_france['css_non_participative'].values[0],
      'CSS participative': df_css_participative_france['css_participative'].values[0]
  })

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Convertir les colonnes 'CSS non participative' et 'CSS participative' en num√©rique si n√©cessaire
  all_data['CSS non participative'] = all_data['CSS non participative'].astype(str).str.replace(',', '.').astype(float)
  all_data['CSS participative'] = all_data['CSS participative'].astype(str).str.replace(',', '.').astype(float)

  # Cr√©er le graphique interactif en barres horizontales pour les deux variables
  fig = px.bar(all_data.melt(id_vars='Territoires', value_vars=['CSS non participative', 'CSS participative']),
               x='value', y='Territoires', color='variable', barmode='group',
               title=f"Comparaison des parts de CSS non participative et participative en {last_year_css}",
               labels={'value': 'Part des b√©n√©ficiaires', 'variable': 'Type de CSS'})

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key15"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write(f"Part des b√©n√©ficiaires de la CSS non participative et participative en {last_year_css}")
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)


  #####################
  st.subheader("Part des b√©n√©ficiaires de la pension d'invalidit√©")
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2023")

  last_year_pension = "2023"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(fichier, code, column_code='codgeo'):
      df = pd.read_csv(fichier, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df

  # Commune
  df_pension_invalidite_commune = load_data(f"./sante/acces_droits/pension_invalidite/pension_invalidite_commune_{last_year_pension}.csv", code_commune)
  data_commune = pd.DataFrame({
      'Territoires': [nom_commune],
      'Pension d\'invalidit√©': df_pension_invalidite_commune['pension_invalidite'].values[0]
  })

  # EPCI
  df_pension_invalidite_epci = load_data(f"./sante/acces_droits/pension_invalidite/pension_invalidite_epci_{last_year_pension}.csv", code_epci)
  data_epci = pd.DataFrame({
      'Territoires': [nom_epci],
      'Pension d\'invalidit√©': df_pension_invalidite_epci['pension_invalidite'].values[0]
  })

  # D√©partement
  df_pension_invalidite_departement = load_data(f"./sante/acces_droits/pension_invalidite/pension_invalidite_departement_{last_year_pension}.csv", code_departement)
  data_departement = pd.DataFrame({
      'Territoires': [nom_departement],
      'Pension d\'invalidit√©': df_pension_invalidite_departement['pension_invalidite'].values[0]
  })

  # R√©gion
  df_pension_invalidite_region = load_data(f"./sante/acces_droits/pension_invalidite/pension_invalidite_region_{last_year_pension}.csv", code_region)
  data_region = pd.DataFrame({
      'Territoires': [nom_region],
      'Pension d\'invalidit√©': df_pension_invalidite_region['pension_invalidite'].values[0]
  })

  # France
  df_pension_invalidite_france = load_data(f"./sante/acces_droits/pension_invalidite/pension_invalidite_france_{last_year_pension}.csv", '1111')
  data_france = pd.DataFrame({
      'Territoires': ['France'],
      'Pension d\'invalidit√©': df_pension_invalidite_france['pension_invalidite'].values[0]
  })

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Convertir la colonne 'Pension d'invalidit√©' en num√©rique si n√©cessaire
  all_data['Pension d\'invalidit√©'] = all_data['Pension d\'invalidit√©'].astype(str).str.replace(',', '.').astype(float)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Pension d\'invalidit√©', y='Territoires', orientation='h',
               title=f"Comparaison de la part des b√©n√©ficiaires de la pension d'invalidit√© en {last_year_pension}")

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key16"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write(f"Part des b√©n√©ficiaires de la pension d'invalidit√© en {last_year_pension}")
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)

  #############################################
  st.header("4. La pr√©vention")
  st.subheader("Les b√©n√©ficiaires √©ligibles sans recours √† la VAG sur les 24 derniers mois")
  st.caption("Source : Observatoire interr√©gime des situaitons de fragilit√©. Parue le XXXX - Mill√©sime 2023")

  last_year_vag = "2023"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(fichier, code, column_code='codgeo'):
      df = pd.read_csv(fichier, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['sans_vag_24mois'].values[0]

  # Commune
  tx_sans_vag_commune = load_data(f"./sante/prevention/vag/sans_vag_commune_{last_year_vag}.csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux sans VAG 24 mois': [tx_sans_vag_commune]})

  # EPCI
  tx_sans_vag_epci = load_data(f"./sante/prevention/vag/sans_vag_epci_{last_year_vag}.csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux sans VAG 24 mois': [tx_sans_vag_epci]})

  # D√©partement
  tx_sans_vag_departement = load_data(f"./sante/prevention/vag/sans_vag_departement_{last_year_vag}.csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux sans VAG 24 mois': [tx_sans_vag_departement]})

  # R√©gion
  tx_sans_vag_region = load_data(f"./sante/prevention/vag/sans_vag_region_{last_year_vag}.csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux sans VAG 24 mois': [tx_sans_vag_region]})

  # France
  tx_sans_vag_france = load_data(f"./sante/prevention/vag/sans_vag_france_{last_year_vag}.csv", '1111')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux sans VAG 24 mois': [tx_sans_vag_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux sans VAG 24 mois', y='Territoires', orientation='h',
               title=f"Comparaison du taux sans VAG sur 24 mois en {last_year_vag}")

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key4"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write(f"Donn√©es des b√©n√©ficiaires √©ligibles sans recours √† la VAG sur les 24 derniers mois en {last_year_vag}")
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)


  ##############################
  st.subheader("Les b√©n√©ficiaires du R√©gime G√©n√©ral de 65 ans et plus sans recours √† la VAG sur les 24 derniers mois")
  st.caption("Source : Observatoire interr√©gime des situaitons de fragilit√©. Parue le XXXX - Mill√©sime 2023")

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(fichier, code, column_code='codgeo'):
      df = pd.read_csv(fichier, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['sans_vag_65p_24mois'].values[0]

  # Commune
  tx_sans_vag_65p_commune = load_data(f"./sante/prevention/vag_65p/sans_vag_65p_commune_{last_year_vag}.csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux sans VAG 65 ans et plus 24 mois': [tx_sans_vag_65p_commune]})

  # EPCI
  tx_sans_vag_65p_epci = load_data(f"./sante/prevention/vag_65p/sans_vag_65p_epci_{last_year_vag}.csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux sans VAG 65 ans et plus 24 mois': [tx_sans_vag_65p_epci]})

  # D√©partement
  tx_sans_vag_65p_departement = load_data(f"./sante/prevention/vag_65p/sans_vag_65p_departement_{last_year_vag}.csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux sans VAG 65 ans et plus 24 mois': [tx_sans_vag_65p_departement]})

  # R√©gion
  tx_sans_vag_65p_region = load_data(f"./sante/prevention/vag_65p/sans_vag_65p_region_{last_year_vag}.csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux sans VAG 65 ans et plus 24 mois': [tx_sans_vag_65p_region]})

  # France
  tx_sans_vag_65p_france = load_data(f"./sante/prevention/vag_65p/sans_vag_65p_france_{last_year_vag}.csv", '1111')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux sans VAG 65 ans et plus 24 mois': [tx_sans_vag_65p_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux sans VAG 65 ans et plus 24 mois', y='Territoires', orientation='h',
               title=f"Comparaison du taux sans VAG sur 24 mois pour les 65 ans et plus en {last_year_vag}")

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key5"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write(f"Donn√©es des b√©n√©ficiaires √©ligibles sans recours √† la VAG sur les 24 derniers mois pour les 65 ans et plus en {last_year_vag}")
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)


  ##############################
  st.subheader('Les femmes de 20 √† 64 ans sans consultation gyn√©cologique sur les 24 derniers mois')
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2023")

  last_year_gynecologue = "2023"
  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(fichier, code, column_code='codgeo'):
      df = pd.read_csv(fichier, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['sans_consultation_gynecologue_24mois'].values[0]

  # Commune
  tx_sans_gynecologue_commune = load_data(f"./sante/prevention/gynecologue/sans_consultation_gynecologue_24mois_commune_{last_year_gynecologue}.csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux sans consultation gyn√©cologique 24 mois': [tx_sans_gynecologue_commune]})

  # EPCI
  tx_sans_gynecologue_epci = load_data(f"./sante/prevention/gynecologue/sans_consultation_gynecologue_24mois_epci_{last_year_gynecologue}.csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux sans consultation gyn√©cologique 24 mois': [tx_sans_gynecologue_epci]})

  # D√©partement
  tx_sans_gynecologue_departement = load_data(f"./sante/prevention/gynecologue/sans_consultation_gynecologue_24mois_departement_{last_year_gynecologue}.csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux sans consultation gyn√©cologique 24 mois': [tx_sans_gynecologue_departement]})

  # R√©gion
  tx_sans_gynecologue_region = load_data(f"./sante/prevention/gynecologue/sans_consultation_gynecologue_24mois_region_{last_year_gynecologue}.csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux sans consultation gyn√©cologique 24 mois': [tx_sans_gynecologue_region]})

  # France
  tx_sans_gynecologue_france = load_data(f"./sante/prevention/gynecologue/sans_consultation_gynecologue_24mois_france_{last_year_gynecologue}.csv", '1111')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux sans consultation gyn√©cologique 24 mois': [tx_sans_gynecologue_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux sans consultation gyn√©cologique 24 mois', y='Territoires', orientation='h',
               title=f"Comparaison du taux sans consultation gyn√©cologique sur 24 mois en {last_year_gynecologue}")

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key6"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write(f"Donn√©es des b√©n√©ficiaires √©ligibles de 20 √† 64 ans sans consultation gyn√©cologique sur les 24 derniers mois en {last_year_gynecologue}")
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)

  ##############################
  st.subheader("Les femmes de 50 √† 74 ans n'ayant pas eu d'acte de mammographie sur les 24 derniers mois")
  st.caption("Source : Observatoire Interr√©gime des situations de fragilit√©. Parue le XXXX - Mill√©sime 2023")

  last_year_mammographie = "2023"
  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(fichier, code, column_code='codgeo'):
      df = pd.read_csv(fichier, dtype={column_code: str}, sep=';')
      df = df.loc[df[column_code] == code]
      return df['sans_mammographie_24mois'].values[0]

  # Commune
  tx_sans_mammographie_commune = load_data(f"./sante/prevention/mammographie/sans_mammographie_24mois_commune_{last_year_mammographie}.csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux des femmes sans acte de mammographie 24 mois': [tx_sans_mammographie_commune]})

  # EPCI
  tx_sans_mammographie_epci = load_data(f"./sante/prevention/mammographie/sans_mammographie_24mois_epci_{last_year_mammographie}.csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux des femmes sans acte de mammographie 24 mois': [tx_sans_mammographie_epci]})

  # D√©partement
  tx_sans_mammographie_departement = load_data(f"./sante/prevention/mammographie/sans_mammographie_24mois_departement_{last_year_mammographie}.csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux des femmes sans acte de mammographie 24 mois': [tx_sans_mammographie_departement]})

  # R√©gion
  tx_sans_mammographie_region = load_data(f"./sante/prevention/mammographie/sans_mammographie_24mois_region_{last_year_mammographie}.csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux des femmes sans acte de mammographie 24 mois': [tx_sans_mammographie_region]})

  # France
  tx_sans_mammographie_france = load_data(f"./sante/prevention/mammographie/sans_mammographie_24mois_france_{last_year_mammographie}.csv", '1111')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux des femmes sans acte de mammographie 24 mois': [tx_sans_mammographie_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux des femmes sans acte de mammographie 24 mois', y='Territoires', orientation='h',
               title=f"Comparaison du taux des femmes sans acte de mammographie sur 24 mois en {last_year_mammographie}")

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key7"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write(f"Donn√©es des b√©n√©ficiaires femmes de 50 √† 74 ans n'ayant pas eu un acte de mammographie sur les 24 derniers mois en {last_year_mammographie}")
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)

  ###############################################################
  st.header("5.La pr√©vention par le sport")
  st.subheader("Les licenci√©s sportifs - Sur la population totale")
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2019")
  last_year_licsport = "2019"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport'].values[0]

  # Commune
  tx_licencies_sportifs_commune = load_data("./sante/licencies_sportifs/global/licsport_commune_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs 2019': [tx_licencies_sportifs_commune]})

  # EPCI
  tx_licencies_sportifs_epci = load_data("./sante/licencies_sportifs/global/licsport_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs 2019': [tx_licencies_sportifs_epci]})

  # D√©partement
  tx_licencies_sportifs_departement = load_data("./sante/licencies_sportifs/global/licsport_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs 2019': [tx_licencies_sportifs_departement]})

  # R√©gion
  tx_licencies_sportifs_region = load_data("./sante/licencies_sportifs/global/licsport_reÃÅgion_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs 2019': [tx_licencies_sportifs_region]})

  # France
  tx_licencies_sportifs_france = load_data("./sante/licencies_sportifs/global/licsport_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs 2019': [tx_licencies_sportifs_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Convertir la colonne 'taux de licenci√©s sportifs 2019' en num√©rique
  all_data['Taux de licenci√©s sportifs 2019'] = all_data['Taux de licenci√©s sportifs 2019'].str.replace(',', '.').astype(float)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux de licenci√©s sportifs 2019', y='Territoires', orientation='h',
               title='Comparaison du taux de licenci√©s sportifs en 2019')

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique"],  # required
      icons=["table", "bar-chart"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key8"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write("Donn√©es des licenci√©s sportifs en 2019")
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)

  ###################################################
  st.subheader("Les licenci√©s sportifs des 0-14 ans")
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2019")

  last_year_licsport = "2019"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport014'].values[0]

  # Commune
  tx_licencies_sportifs_0014_commune = load_data("./sante/licencies_sportifs/00-14/licsport_0014_communes_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs de 0 √† 14 ans ' + last_year_licsport : [tx_licencies_sportifs_0014_commune]})

  # EPCI
  tx_licencies_sportifs_0014_epci = load_data("./sante/licencies_sportifs/00-14/licsport_0014_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs de 0 √† 14 ans ' + last_year_licsport : [tx_licencies_sportifs_0014_epci]})

  # D√©partement
  tx_licencies_sportifs_0014_departement = load_data("./sante/licencies_sportifs/00-14/licsport_0014_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs de 0 √† 14 ans ' + last_year_licsport : [tx_licencies_sportifs_0014_departement]})

  # R√©gion
  tx_licencies_sportifs_0014_region = load_data("./sante/licencies_sportifs/00-14/licsport_0014_region_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs de 0 √† 14 ans ' + last_year_licsport : [tx_licencies_sportifs_0014_region]})

  # France
  tx_licencies_sportifs_0014_france = load_data("./sante/licencies_sportifs/00-14/licsport_0014_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs de 0 √† 14 ans ' + last_year_licsport : [tx_licencies_sportifs_0014_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Convertir la colonne des taux en num√©rique
  all_data['Taux de licenci√©s sportifs de 0 √† 14 ans ' + last_year_licsport] = all_data['Taux de licenci√©s sportifs de 0 √† 14 ans ' + last_year_licsport].str.replace(',', '.').astype(float)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux de licenci√©s sportifs de 0 √† 14 ans ' +  last_year_licsport, y='Territoires', orientation='h',
               title='Comparaison du taux de licenci√©s sportifs de 0 √† 14 ans en ' + last_year_licsport)


  #Dont filles
  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport014_f'].values[0]

  # Commune
  tx_licencies_sportifs_014_f_commune = load_data("./sante/licencies_sportifs/00-14/filles/licsport_0014_f_communes_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs de 00 √† 14 ans filles ' + last_year_licsport: [tx_licencies_sportifs_014_f_commune]})

  # EPCI
  tx_licencies_sportifs_014_f_epci = load_data("./sante/licencies_sportifs/00-14/filles/licsport_0014_f_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs de 00 √† 14 ans filles ' + last_year_licsport: [tx_licencies_sportifs_014_f_epci]})

  # D√©partement
  tx_licencies_sportifs_014_f_departement = load_data("./sante/licencies_sportifs/00-14/filles/licsport_0014_f_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs de 00 √† 14 ans filles ' + last_year_licsport: [tx_licencies_sportifs_014_f_departement]})

  # R√©gion
  tx_licencies_sportifs_014_f_region = load_data("./sante/licencies_sportifs/00-14/filles/licsport_0014_f_region_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs de 00 √† 14 ans filles ' + last_year_licsport: [tx_licencies_sportifs_014_f_region]})

  # France
  tx_licencies_sportifs_014_f_france = load_data("./sante/licencies_sportifs/00-14/filles/licsport_0014_f_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs de 00 √† 14 ans filles ' + last_year_licsport: [tx_licencies_sportifs_014_f_france]})

  # Fusionner les donn√©es
  all_data_f = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data_f.reset_index(drop=True, inplace=True)

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique", "Dont filles"],  # required
      icons=["table", "bar-chart", "gender-female"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key9"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write("Donn√©es des licenci√©s sportifs de 0 √† 14 ans en " +  last_year_licsport)
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)
  elif selected == "Dont filles":
      st.dataframe(all_data_f)

  ##############################################
  st.subheader("Les licenci√©s sportifs des 15-29 ans")
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2019")

  last_year_licsport = "2019"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport1529'].values[0]

  # Commune
  tx_licencies_sportifs_1529_commune = load_data("./sante/licencies_sportifs/15-29/licsport_1529_communes_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs de 15 √† 29 ans ' + last_year_licsport : [tx_licencies_sportifs_1529_commune]})

  # EPCI
  tx_licencies_sportifs_1529_epci = load_data("./sante/licencies_sportifs/15-29/licsport_1529_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs de 15 √† 29 ans ' + last_year_licsport : [tx_licencies_sportifs_1529_epci]})

  # D√©partement
  tx_licencies_sportifs_1529_departement = load_data("./sante/licencies_sportifs/15-29/licsport_1529_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs de 15 √† 29 ans ' + last_year_licsport : [tx_licencies_sportifs_1529_departement]})

  # R√©gion
  tx_licencies_sportifs_1529_region = load_data("./sante/licencies_sportifs/15-29/licsport_1529_region_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs de 15 √† 29 ans ' + last_year_licsport : [tx_licencies_sportifs_1529_region]})

  # France
  tx_licencies_sportifs_1529_france = load_data("./sante/licencies_sportifs/15-29/licsport_1529_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs de 15 √† 29 ans ' + last_year_licsport : [tx_licencies_sportifs_1529_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Convertir la colonne des taux en num√©rique
  all_data['Taux de licenci√©s sportifs de 15 √† 29 ans ' + last_year_licsport] = all_data['Taux de licenci√©s sportifs de 15 √† 29 ans ' + last_year_licsport].str.replace(',', '.').astype(float)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux de licenci√©s sportifs de 15 √† 29 ans ' +  last_year_licsport, y='Territoires', orientation='h',
               title='Comparaison du taux de licenci√©s sportifs de 15 √† 29 ans en ' + last_year_licsport)

  # Dont femmes
  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport1529_f'].values[0]

  # Commune
  tx_licencies_sportifs_1529_commune = load_data("./sante/licencies_sportifs/15-29/femmes/licsport_1529_f_communes_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs de 15 √† 29 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_1529_commune]})

  # EPCI
  tx_licencies_sportifs_1529_epci = load_data("./sante/licencies_sportifs/15-29/femmes/licsport_1529_f_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs de 15 √† 29 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_1529_epci]})

  # D√©partement
  tx_licencies_sportifs_1529_departement = load_data("./sante/licencies_sportifs/15-29/femmes/licsport_1529_f_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs de 15 √† 29 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_1529_departement]})

  # R√©gion
  tx_licencies_sportifs_1529_region = load_data("./sante/licencies_sportifs/15-29/femmes/licsport_1529_f_region_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs de 15 √† 29 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_1529_region]})

  # France
  tx_licencies_sportifs_1529_france = load_data("./sante/licencies_sportifs/15-29/femmes/licsport_1529_f_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs de 15 √† 29 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_1529_france]})

  # Fusionner les donn√©es
  all_data_f = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data_f.reset_index(drop=True, inplace=True)


  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique", "Dont femmes"],  # required
      icons=["table", "bar-chart", "gender-female"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key10"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write("Donn√©es des licenci√©s sportifs de 15 √† 29 ans en " +  last_year_licsport)
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)
  elif selected == "Dont femmes":
      st.dataframe(all_data_f)

  ##############################################
  st.subheader("Les licenci√©s sportifs des 30-59 ans")
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2019")

  last_year_licsport = "2019"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport3059'].values[0]

  # Commune
  tx_licencies_sportifs_3059_commune = load_data("./sante/licencies_sportifs/30-59/licsport_3059_communes_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs de 30 √† 59 ans ' + last_year_licsport : [tx_licencies_sportifs_3059_commune]})

  # EPCI
  tx_licencies_sportifs_3059_epci = load_data("./sante/licencies_sportifs/30-59/licsport_3059_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs de 30 √† 59 ans ' + last_year_licsport : [tx_licencies_sportifs_3059_epci]})

  # D√©partement
  tx_licencies_sportifs_3059_departement = load_data("./sante/licencies_sportifs/30-59/licsport_3059_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs de 30 √† 59 ans ' + last_year_licsport : [tx_licencies_sportifs_3059_departement]})

  # R√©gion
  tx_licencies_sportifs_3059_region = load_data("./sante/licencies_sportifs/30-59/licsport_3059_region_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs de 30 √† 59 ans ' + last_year_licsport : [tx_licencies_sportifs_3059_region]})

  # France
  tx_licencies_sportifs_3059_france = load_data("./sante/licencies_sportifs/30-59/licsport_3059_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs de 30 √† 59 ans ' + last_year_licsport : [tx_licencies_sportifs_3059_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Convertir la colonne des taux en num√©rique
  all_data['Taux de licenci√©s sportifs de 30 √† 59 ans ' + last_year_licsport] = all_data['Taux de licenci√©s sportifs de 30 √† 59 ans ' + last_year_licsport].str.replace(',', '.').astype(float)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux de licenci√©s sportifs de 30 √† 59 ans ' +  last_year_licsport, y='Territoires', orientation='h',
               title='Comparaison du taux de licenci√©s sportifs de 30 √† 59 ans en ' + last_year_licsport)


  # Dont femmes
  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport3059_f'].values[0]

  # Commune
  tx_licencies_sportifs_3059_commune = load_data("./sante/licencies_sportifs/30-59/femmes/licsport_3059_f_communes_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs de 30 √† 59 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_3059_commune]})

  # EPCI
  tx_licencies_sportifs_3059_epci = load_data("./sante/licencies_sportifs/30-59/femmes/licsport_3059_f_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs de 30 √† 59 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_3059_epci]})

  # D√©partement
  tx_licencies_sportifs_3059_departement = load_data("./sante/licencies_sportifs/30-59/femmes/licsport_3059_f_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs de 30 √† 59 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_3059_departement]})

  # R√©gion
  tx_licencies_sportifs_3059_region = load_data("./sante/licencies_sportifs/30-59/femmes/licsport_3059_f_region_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs de 30 √† 59 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_3059_region]})

  # France
  tx_licencies_sportifs_3059_france = load_data("./sante/licencies_sportifs/30-59/femmes/licsport_3059_f_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs de 30 √† 59 ans femmes ' + last_year_licsport: [tx_licencies_sportifs_3059_france]})

  # Fusionner les donn√©es
  all_data_f = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data_f.reset_index(drop=True, inplace=True)

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique", "Dont femmes"],  # required
      icons=["table", "bar-chart", "gender-female"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key11"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write("Donn√©es des licenci√©s sportifs de 30 √† 59 ans en " +  last_year_licsport)
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)
  elif selected == "Dont femmes":
      st.dataframe(all_data_f)

  ##############################################
  st.subheader("Les licenci√©s sportifs des 60 ans et plus")
  st.caption("Source : xxx. Parue le XXXX - Mill√©sime 2019")

  last_year_licsport = "2019"

  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport60'].values[0]

  # Commune
  tx_licencies_sportifs_60P_commune = load_data("./sante/licencies_sportifs/60P/licsport_60P_communes_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs de 60 ans et plus ' + last_year_licsport : [tx_licencies_sportifs_60P_commune]})

  # EPCI
  tx_licencies_sportifs_60P_epci = load_data("./sante/licencies_sportifs/60P/licsport_60P_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs de 60 ans et plus ' + last_year_licsport : [tx_licencies_sportifs_60P_epci]})

  # D√©partement
  tx_licencies_sportifs_60P_departement = load_data("./sante/licencies_sportifs/60P/licsport_60P_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs de 60 ans et plus ' + last_year_licsport : [tx_licencies_sportifs_60P_departement]})

  # R√©gion
  tx_licencies_sportifs_60P_region = load_data("./sante/licencies_sportifs/60P/licsport_60P_region_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs de 60 ans et plus ' + last_year_licsport : [tx_licencies_sportifs_60P_region]})

  # France
  tx_licencies_sportifs_60P_france = load_data("./sante/licencies_sportifs/60P/licsport_60P_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs de 60 ans et plus ' + last_year_licsport : [tx_licencies_sportifs_60P_france]})

  # Fusionner les donn√©es
  all_data = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data.reset_index(drop=True, inplace=True)

  # Convertir la colonne des taux en num√©rique
  all_data['Taux de licenci√©s sportifs de 60 ans et plus ' + last_year_licsport] = all_data['Taux de licenci√©s sportifs de 60 ans et plus ' + last_year_licsport].str.replace(',', '.').astype(float)

  # Cr√©er le graphique interactif en barres horizontales
  fig = px.bar(all_data, x='Taux de licenci√©s sportifs de 60 ans et plus ' +  last_year_licsport, y='Territoires', orientation='h',
               title='Comparaison du taux de licenci√©s sportifs de 60 ans et plus en ' + last_year_licsport)


  # Dont femmes
  # Charger et filtrer les donn√©es pour chaque niveau g√©ographique
  def load_data(file_path, code, column_code='codgeo'):
      df = pd.read_csv(file_path, dtype={column_code: str, "an": str}, sep=';')
      df = df.loc[(df[column_code] == code) & (df['an'] == last_year_licsport)]
      return df['p_licsport60_f'].values[0]

  # Commune
  tx_licencies_sportifs_60P_commune = load_data("./sante/licencies_sportifs/60P/femmes/licsport_60P_f_communes_" + last_year_licsport + ".csv", code_commune)
  data_commune = pd.DataFrame({'Territoires': [nom_commune], 'Taux de licenci√©s sportifs de 60 ans et plus femmes ' + last_year_licsport: [tx_licencies_sportifs_60P_commune]})

  # EPCI
  tx_licencies_sportifs_60P_epci = load_data("./sante/licencies_sportifs/60P/femmes/licsport_60P_f_epci_" + last_year_licsport + ".csv", code_epci)
  data_epci = pd.DataFrame({'Territoires': [nom_epci], 'Taux de licenci√©s sportifs de 60 ans et plus femmes ' + last_year_licsport: [tx_licencies_sportifs_60P_epci]})

  # D√©partement
  tx_licencies_sportifs_60P_departement = load_data("./sante/licencies_sportifs/60P/femmes/licsport_60P_f_departement_" + last_year_licsport + ".csv", code_departement)
  data_departement = pd.DataFrame({'Territoires': [nom_departement], 'Taux de licenci√©s sportifs de 60 ans et plus femmes ' + last_year_licsport: [tx_licencies_sportifs_60P_departement]})

  # R√©gion
  tx_licencies_sportifs_60P_region = load_data("./sante/licencies_sportifs/60P/femmes/licsport_60P_f_region_" + last_year_licsport + ".csv", code_region)
  data_region = pd.DataFrame({'Territoires': [nom_region], 'Taux de licenci√©s sportifs de 60 ans et plus femmes ' + last_year_licsport: [tx_licencies_sportifs_60P_region]})

  # France
  tx_licencies_sportifs_60P_france = load_data("./sante/licencies_sportifs/60P/femmes/licsport_60P_f_france_" + last_year_licsport + ".csv", '1111', column_code='codgeo')
  data_france = pd.DataFrame({'Territoires': ['France'], 'Taux de licenci√©s sportifs de 60 ans et plus femmes ' + last_year_licsport: [tx_licencies_sportifs_60P_france]})

  # Fusionner les donn√©es
  all_data_f = pd.concat([data_commune, data_epci, data_departement, data_region, data_france])

  # R√©initialiser l'index et renommer les colonnes
  all_data_f.reset_index(drop=True, inplace=True)

  # Cr√©er le menu d'options pour les onglets
  selected = option_menu(
      menu_title=None,  # required
      options=["Tableau", "Graphique", "Dont femmes"],  # required
      icons=["table", "bar-chart", "gender-female"],  # optional
      menu_icon="cast",  # optional
      default_index=0,  # optional
      orientation="horizontal",
      key="key12"
  )

  # Afficher le contenu bas√© sur l'onglet s√©lectionn√©
  if selected == "Tableau":
      st.write("Donn√©es des licenci√©s sportifs de 60 ans et plus en " +  last_year_licsport)
      st.dataframe(all_data)
  elif selected == "Graphique":
      st.plotly_chart(fig)
  elif selected == "Dont femmes":
      st.dataframe(all_data_f)
