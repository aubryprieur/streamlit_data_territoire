import streamlit as st
from .utils import afficher_infos_commune
import pandas as pd
import matplotlib.pyplot as plt
import plotly_express as px
import numpy as np
import altair as alt
import geopandas as gpd
import requests
import json # library to handle JSON files
# from streamlit_folium import folium_static
from streamlit_folium import folium_static
import folium # map rendering library
import streamlit.components.v1 as components
import fiona

def app():
  # Appeler la fonction et r√©cup√©rer les informations
  (code_commune, nom_commune, code_epci, nom_epci, code_departement, nom_departement, code_region, nom_region) = afficher_infos_commune()

  #############################################################################

  st.title("ü©∫ SANT√â")
  st.header('1.Taux de mortalit√©')
  st.caption("Le taux de mortalit√© est ici un taux annuel moyen sur la derni√®re p√©riode intercensitaire. \
              C‚Äôest le rapport entre les d√©c√®s de la p√©riode et la moyenne des populations entre les deux recensements. \
              Ce taux de mortalit√© est le taux 'brut' de mortalit√©. \
              Il ne doit pas √™tre confondu avec le taux de mortalit√© standardis√© qui permet de comparer des taux de mortalit√© \
              √† structure d'√¢ge √©quivalente ou avec le taux de mortalit√© pr√©matur√© qui ne s'int√©resse qu'aux d√©c√®s intervenus avant 65 ans.")

  #Commune
  def tx_mortalite_commune(fichier, nom_ville) :
    df = pd.read_csv(fichier, dtype={"codgeo": str, "an": str},sep=";")
    df_ville = df.loc[df["libgeo"] == nom_ville]
    df_ville = df_ville.loc[df_ville["an"] == "2013-2018"]
    return df_ville
  tx_mortalite_ville = tx_mortalite_commune("./sante/taux_de_mortalite/insee_rp_evol_1968_communes_2018.csv",nom_commune)

  #EPCI
  def tx_mortalite_epci(fichier, epci) :
    df = pd.read_csv(fichier, dtype={"codgeo": str, "an": str},sep=";")
    df_epci = df.loc[df["codgeo"] == epci]
    df_epci = df_epci.loc[df_epci["an"] == "2013-2018"]
    return df_epci
  tx_mortalite_epci = tx_mortalite_epci("./sante/taux_de_mortalite/insee_rp_evol_1968_epci_2018.csv",code_epci)

  #D√©partement
  def tx_mortalite_departement(fichier, departement) :
    df = pd.read_csv(fichier, dtype={"codgeo": str, "an": str},sep=";")
    df_departement = df.loc[df["codgeo"] == departement]
    df_departement = df_departement.loc[df_departement["an"] == "2013-2018"]
    return df_departement
  tx_mortalite_dpt = tx_mortalite_departement("./sante/taux_de_mortalite/insee_rp_evol_1968_departement_2018.csv",code_departement)

  #R√©gion
  def tx_mortalite_region(fichier, region) :
    df = pd.read_csv(fichier, dtype={"codgeo": str, "an": str},sep=";")
    df_region = df.loc[df["codgeo"] == region]
    df_region = df_region.loc[df_region["an"] == "2013-2018"]
    return df_region
  tx_mortalite_reg = tx_mortalite_region("./sante/taux_de_mortalite/insee_rp_evol_1968_region_2018.csv",str(round(code_region)))

  #France
  data = {'codgeo':['1'],
          'libgeo':['France'],
          'an':['2013-2018'],
          'tx_morta':['8,8']
          }
  tx_mortalite_france = pd.DataFrame(data)

  #Global
  result = pd.concat([tx_mortalite_ville,tx_mortalite_epci, tx_mortalite_dpt, tx_mortalite_reg, tx_mortalite_france])
  st.write(result)
  ############################################################################
  st.header("Accessibilit√© potentielle localis√©e (APL) aux m√©decins g√©n√©ralistes")
  st.caption("L‚ÄôAccessibilit√© Potentielle Localis√©e est un indicateur local, disponible au niveau de chaque commune, qui tient compte de l‚Äôoffre et de la demande issue des communes environnantes. Calcul√© √† l‚Äô√©chelle communale, l‚ÄôAPL met en √©vidence des disparit√©s d‚Äôoffre de soins. L‚ÄôAPL tient compte du niveau d‚Äôactivit√© des professionnels en exercice ainsi que de la structure par √¢ge de la population de chaque commune qui influence les besoins de soins. L‚Äôindicateur permet de quantifier la possibilit√© des habitants d‚Äôacc√©der aux soins des m√©decins g√©n√©ralistes lib√©raux.")

  df_apl = pd.read_csv("./sante/apl/apl_medecin_generaliste_com_2018.csv", dtype={"codgeo": str, "an": str},sep=";")
  #Commune
  df_apl_com = df_apl.loc[df_apl["codgeo"] == code_commune]
  apl_com = df_apl_com['apl_mg_hmep'].values[0]
  #epci
  df_apl_epci = pd.read_csv("./sante/apl/apl_medecin_generaliste_epci_2018.csv", dtype={"codgeo": str, "an": str},sep=";")
  df_apl_epci = df_apl_epci.loc[df_apl_epci["codgeo"] == code_epci]
  apl_epci = df_apl_epci['apl_mg_hmep'].values[0]
  #D√©partement
  df_apl_dpt = pd.read_csv("./sante/apl/apl_medecin_generaliste_dpt_2018.csv", dtype={"codgeo": str, "an": str},sep=";")
  df_apl_dpt = df_apl_dpt.loc[df_apl_dpt["codgeo"] == code_departement]
  apl_dpt = df_apl_dpt['apl_mg_hmep'].values[0]
  #R√©gion
  df_apl_reg = pd.read_csv("./sante/apl/apl_medecin_generaliste_region_2018.csv", dtype={"codgeo": str, "an": str},sep=";")
  df_apl_reg = df_apl_reg.loc[df_apl_reg["codgeo"] == str(round(code_region))]
  apl_reg = df_apl_reg['apl_mg_hmep'].values[0]
  #France
  apl_fr = "3,9"
  #Comparaison
  d = {'Territoires': [nom_commune, nom_epci, nom_departement, nom_region, 'France'], "APL - 2018": [str(apl_com), apl_epci, apl_dpt, apl_reg, apl_fr]}
  df = pd.DataFrame(data=d)
  st.write(df)

  #Boite √† moustaches
  df_apl = df_apl.replace(',','.', regex=True)
  df_apl['apl_mg_hmep'] = pd.to_numeric(df_apl['apl_mg_hmep'])
  fig = px.box(df_apl, x='an', y='apl_mg_hmep')
  boxplot_chart = st.plotly_chart(fig)
  boxplot_chart



